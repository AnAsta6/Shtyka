import sqlite3

#создаёт файл под бд
def create_connection():
    conn = sqlite3.connect('apartments.db')
    return conn

def create_table(conn):
    conn.execute('''CREATE TABLE IF NOT EXISTS apartments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    address TEXT NOT NULL,
                    rooms INTEGER NOT NULL,
                    total_area REAL NOT NULL,
                    living_area REAL NOT NULL,
                    floor INTEGER NOT NULL,
                    total_floors INTEGER NOT NULL,
                    owner_lastname TEXT NOT NULL,
                    price INTEGER NOT NULL)''')

def insert_apartment(conn, apartment):
    cursor = conn.cursor()
    cursor.execute("""
                   INSERT INTO apartments (address, rooms, total_area, living_area, floor, total_floors, owner_lastname, price) 
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                   """, (apartment['address'], apartment['rooms'], apartment['total_area'],
                         apartment['living_area'], apartment['floor'], apartment['total_floors'],
                         apartment['owner_lastname'], apartment['price']))
    conn.commit()


#сортировка Шелла
def shell_sort(apartments, keys):
    gap = len(apartments) // 2
    while gap > 0:
        for i in range(gap, len(apartments)):
            temp = apartments[i]
            j = i
            while j >= gap and all(temp[keys[k]] < apartments[j - gap][keys[k]] for k in range(len(keys))):
                apartments[j] = apartments[j - gap]
                j -= gap
            apartments[j] = temp
        gap //= 2
    return apartments

# ключи для сортировки

#вывод всей бд
def get_sorted_apartments(conn, keys):
    cursor = conn.execute("SELECT * FROM apartments")
    apartments = [dict(zip([column[0] for column in cursor.description], row)) for row in cursor.fetchall()]
    return shell_sort(apartments, keys)

#сортировка по комнатам
def get_sorted_apartments_by_rooms(conn, num_rooms, keys):
    cursor = conn.execute("SELECT * FROM apartments WHERE rooms = ?", (num_rooms,))
    apartments = [dict(zip([column[0] for column in cursor.description], row)) for row in cursor.fetchall()]
    return shell_sort(apartments, keys)

#сортировка по цене
def get_sorted_apartments_by_price_range(conn, price_range, keys):
    cursor = conn.execute("SELECT * FROM apartments WHERE price >= ? AND price <= ?", price_range)
    apartments = [dict(zip([column[0] for column in cursor.description], row)) for row in cursor.fetchall()]
    return shell_sort(apartments, keys)

#айди
def delete_apartment(conn, id):
    query = "DELETE FROM apartments WHERE id = ?"
    conn.execute(query, (id,))
    conn.commit()

#айди по квартирам
def update_apartment(conn, id, apartment):
    query = "UPDATE apartments SET address = ?, rooms = ?, total_area = ?, living_area = ?, floor = ?, total_floors = ?, owner_lastname = ?, price = ? WHERE id = ?"
    conn.execute(query, apartment + (id,))
    conn.commit()

#Меню управления
def print_menu():
    print("Выберете функцию из данного списка:")
    print("\n1. Добавить квартиры")
    print("2. Удалить квартиру по ID")
    print("3. Получить отсортированный список всех квартир")
    print("4. Получит отсортированный список квартир по количеству комнат")
    print("5. Получить отсортированный список квартир по ценовому диапазону")
    print("6. Обновить информацию по ID")
    print("7. Выход")

# работа с меню
def main():
    conn = create_connection()
    create_table(conn)

    while True:
        print_menu()
        choice = int(input("Введите номер своего выбора: "))

        #добавление квартир
        if choice == 1:

            while True:
                try:
                    num_flats = int(input("Введите количество квартир для добавления: "))
                    if num_flats < 0:
                        print("Количество квартир должно быть положительным числом.")
                    else:
                        break
                except ValueError:
                    print("Количество квартир должно быть целым числом.")

            for i in range(num_flats):
                apartment = {}
                while True:
                    address = input("Введите адрес квартиры: ")
                    if address:
                        break
                    print("Ошибка: адрес не может быть пустым.")
                apartment['address'] = address

                while True:
                    rooms_input = input("Введите количество комнат в квартире: ")
                    if rooms_input.isdigit():
                        rooms = int(rooms_input)
                        break
                    print("Ошибка: количество комнат должно быть целым числом.")
                apartment['rooms'] = rooms

                while True:
                    total_area_input = input("Введите общую площадь в квартире: ")
                    if total_area_input.replace('.', '', 1).isdigit():
                        total_area = float(total_area_input)
                        break
                    print("Ошибка: общая площадь должна быть числом.")
                apartment['total_area'] = total_area

                while True:
                    living_area_input = input("Введите жилую площадь в квартире: ")
                    if living_area_input.replace('.', '', 1).isdigit():
                        living_area = float(living_area_input)
                        break
                    print("Ошибка: жилая площадь должна быть числом.")
                apartment['living_area'] = living_area

                while True:
                    floor_input = input("Введите этаж: ")
                    if floor_input.isdigit():
                        floor = int(floor_input)
                        break
                    print("Ошибка: этаж должен быть целым числом.")
                apartment['floor'] = floor

                while True:
                    total_floors_input = input("Введите общее количество этажей в доме: ")
                    if total_floors_input.isdigit():
                        total_floors = int(total_floors_input)
                        break
                    print("Ошибка: общее количество этажей должно быть целым числом.")
                apartment['total_floors'] = total_floors

                while True:
                    owner_lastname = input("Введите фамилию владельца квартиры: ")
                    if owner_lastname:
                        if owner_lastname.isalpha():
                            break
                    print("Ошибка: фамилия владельца должна состоять только из букв.")
                apartment['owner_lastname'] = owner_lastname

                while True:
                    price_input = input("Введите стоимость квартиры: ")
                    if price_input.isdigit():
                        price = int(price_input)
                        break
                    print("Ошибка: стоимость квартиры должна быть целым числом.")
                apartment['price'] = price

                insert_apartment(conn, apartment)


        #удоление квартиры по айди

        elif choice == 2:

            while True:
                id = input("Введите ID квартиры для удаления: ")
                if id.isdigit():
                    id = int(id)
                    break
                print("Ошибка: ID квартиры для удаления должно быть целым числом.")

            delete_apartment(conn, id)

        # отсортированный список всех квартир
        elif choice == 3:
            keys = ['rooms', 'price']
            sorted_apartments = get_sorted_apartments(conn, keys)
            for apartment in sorted_apartments:
                print(apartment)

        #отсортированный список квартир по количеству комнат
        elif choice == 4:
            num_rooms = int(input("Введите количество комнат: "))
            keys = ['floor', 'total_floors', 'price']
            sorted_apartments = get_sorted_apartments_by_rooms(conn, num_rooms, keys)
            for apartment in sorted_apartments:
                print(apartment)

        #отсортированный список квартир по ценовому диапазону
        elif choice == 5:
            price_range = tuple(map(int, input("Введите ценовой диапазон через пробел(например, 50000 100000): ").split()))
            keys = ['price']
            sorted_apartments = get_sorted_apartments_by_price_range(conn, price_range, keys)
            for apartment in sorted_apartments:
                print(apartment)

        # Обновить информацию по ID
        elif choice == 6:

            while True:
                id_input = input("Введите ID квартиры для обновления: ")
                if id_input.isdigit():
                    id = int(id_input)
                    break
                print("Ошибка: ID квартиры для обновления должно быть целым числом.")

            while True:
                address = input("Введите новый адрес квартиры: ")
                if address:
                    break
                print("Ошибка: адрес квартиры не может быть пустым.")

            while True:
                try:
                    rooms = int(input("Введите новое количество комнат в квартире: "))
                    break
                except ValueError:
                    print("Ошибка: количество комнат должно быть целым числом.")

            while True:
                try:
                    total_area = float(input("Введите новую общую площадь в квартире: "))
                    break
                except ValueError:
                    print("Ошибка: общая площадь должна быть числом.")

            while True:
                try:
                    living_area = float(input("Введите новую жилую площадь в квартире: "))
                    break
                except ValueError:
                    print("Ошибка: жилая площадь должна быть числом.")

            while True:
                try:
                    floor = int(input("Введите новый этаж: "))
                    break
                except ValueError:
                    print("Ошибка: этаж должен быть целым числом.")

            while True:
                try:
                    total_floors = int(input("Введите новое общее количество этажей в доме: "))
                    break
                except ValueError:
                    print("Ошибка: общее количество этажей должно быть целым числом.")

            while True:
                owner_lastname = input("Введите новую фамилию владельца квартиры: ")
                if owner_lastname:
                    if owner_lastname.isalpha():
                        break
                print("Ошибка: фамилия владельца должна состоять только из букв.")

            while True:
                try:
                    price = int(input("Введите новую стоимость квартиры: "))
                    break
                except ValueError:
                    print("Ошибка: стоимость квартиры должна быть целым числом.")

            apartment = (id, address, rooms, total_area, living_area, floor, total_floors, owner_lastname, price)
            update_apartment(conn, id, apartment)

        # выход
        elif choice == 7:
            break

        else:
            print("Неверный выбор. Пожалуйста, выберите один из предложенных вариантов.")

    # звкрытие бд
    conn.close()

if __name__ == "__main__":
    main()

'''
код для заполнения файла для этого сприпта
https://github.com/AnAsta6/Shtyka/blob/main/%D0%B7%D0%B0%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B1%D0%B4
'''
